# cmd_followup
# Module for port(1)
# SUMMARY: Followup on a Problem Report with change/update (BROKEN)

# Check if this script is run via port(1)
if [ "${PORTTOOLS}" = "" ]
then
	echo "This script should be run via port(1) front-end"
	exit 1
fi

echo "Port followup is currently broken"
echo 1

# Usage
usage ()
{
cat << EOF
FreeBSD Port Tools __VERSION__
Usage:	port followup [-h] [-m <mode>] [-d <diff mode>] [-L] [-n <PR number>]
	-h	- Display this usage summary
	-m <mode> - Override automatic mode selection:
		new - submitting new port
		change - changing a port
		update - updating a port to newer version
	-d <diff mode> - Select diff generation mode:
		SVN - against SVN
		GIT - against git
		<dir> - against Ports tree in <dir>
		<pattern> - against original port in <pwd><pattern>
	-n <PR number> - Select the PR you want to followup to
	-P	- Don't send the followup; print to stdout
	-c	- committer mode: more portlint(1) checks
	-L	- Skip running portlint(1)
EOF
}

# Initialize arguments to the default values
COMMITTER="no"
RUN_PORTLINT="yes"
PR_NUMBER=""
DRY_RUN="no"

# Parse command line arguments
ARGS=`/usr/bin/getopt hm:d:s:p:n:cLP $*`
if [ $? != 0 ]
then
	echo "Error: invalid arguments"
	usage
	exit 2
fi

set -- $ARGS
while [ x"$1" != x"--" -a x"$1" != x"" ]
do
	i=$1
	case "$i" in
	# help
	-h)
		usage
		exit 0
		;;
	# mode: new | change | update
	-m)
		MODE=$2
		case "${MODE}" in
		new|change|update)
			shift
			;;
		*)
			echo "Error: invalid mode: ${MODE}"
			echo "Valid values: new, change, update"
			exit 2
			;;
		esac
		;;
	# diff generation mode
	-d)
		DIFF_MODE=$2
		shift
		;;
	# PR number
	-n)
		PR_NUMBER="`echo $2 | tr -d '[:alpha:]\/'`"
		shift
		;;
	# committer mode
	-c)
		COMMITTER="yes"
		;;
	# don't run portlint(1)
	-L)
		RUN_PORTLINT="no"
		;;
	# print to stdout instead of sending
	-P)
		DRY_RUN="yes"
		;;
	esac
	shift
done

# First, find if there's a PR number.
if [ "x$PR_NUMBER" == "x" ]
then
	echo "Error: Empty PR number"
	usage
	exit 2
fi

# Determine if this is a new port
if [ "${MODE}" = "" ]
then
	svn status Makefile 2>&1 1>/dev/null | grep -qs 'svn: warning: W155007:'
	[ $? -eq 0 ] || [ "`grep '\$FreeBSD: ' Makefile`" ] || MODE="new"
fi

# util_diff will set
# - PORTBASENAME if PORTNAME != port's directory name
# - DIFF_TYPE to SVN, GIT, ports, or suffix
PORTBASENAME=""
DIFF_TYPE=""

# Generate diff or shar, depending on the mode, and create TEMPROOT
. ${SCRIPT_DIR}/util_diff

# Run portlint(1) to validate port's sanity
if [ "${RUN_PORTLINT}" = "yes" ]
then
	echo "===> Validating port with portlint"
	FLAGS="-${PORTLINT_FLAGS:-abt}"
	PORTLINT_LOG="${TEMPROOT}/.portlint.out"
	[ "${COMMITTER}" = "yes" ] && FLAGS="${FLAGS} -c"
	[ "${MODE}" = "new" ] && FLAGS="${FLAGS} -N"
	if portlint ${FLAGS} > ${PORTLINT_LOG}
	then
		cat ${PORTLINT_LOG}
	else
		cat ${PORTLINT_LOG}
		echo "Error validating port"
		cleanup
		exit 1
	fi
else
	echo "===> WARNING: skipping portlint(1)"
fi

# Collect information about the port

echo "===> Collecting info about PR $PR_NUMBER"
QUERY_PR_URL="http://www.freebsd.org/cgi/query-pr.cgi?pr=${PR_NUMBER}"
QUERY_PR="`fetch -qo - "${QUERY_PR_URL}"`"
SUBJECT=`echo "$QUERY_PR" | sed -E '/title/!d; /head/!d; s/<[^>]*[>]//g'`
RESPONSIBLE=`echo $QUERY_PR | sed -E '/Responsible/!d; s/<[^>]*[>]/ /g; s/.*Responsible: //g; s/State: .*//' |tr -d " "`
echo "===> Subject of PR $PR_NUMBER:"
echo "$SUBJECT"

# The following section comes from util_diff.
# For port submit to work with python/ruby ports and GNATS auto-assign, version
# numbers need to be sed'ed out before adding to synopsis.

PYTHON_SUFFIX="`make -V PYTHON_SUFFIX`"
RUBY_SUFFIX="`make -V RUBY_SUFFIX`"
PKGNAMEPREFIX="`make -V PKGNAMEPREFIX | sed -E 's,py${PYTHON_SUFFIX}-,py-,' | sed -E 's,ruby${RUBY_SUFFIX}-,ruby-,'`"
PKGNAMESUFFIX="`make -V PKGNAMESUFFIX`"
PORTNAME="${PKGNAMEPREFIX}`make -V PORTNAME`${PKGNAMESUFFIX}"

# Rest as normal

PORTVERSION="`make -V PORTVERSION`"
PORTREVISION="`make -V PORTREVISION`"
PORTEPOCH="`make -V PORTEPOCH`"
VERSIONSTRING="${PORTVERSION}"
[ "$PORTREVISION" != "0" ] && VERSIONSTRING="${VERSIONSTRING}_${PORTREVISION}"
[ "$PORTEPOCH" != "0" ] && VERSIONSTRING="${VERSIONSTRING},${PORTEPOCH}"

PKGNAME="`make -V PKGNAME`"
CATEGORY="`make -V CATEGORIES | sed -E 's/^([^ ]+).*$/\1/'`"
MAINTAINER="`make -V MAINTAINER`"
COMMENT="`make -V COMMENT`"

# Collect information about the local system
RELEASE="`uname -srp`"
SYSTEM="`uname -a | cut -d ' ' -f 1-12`"

CC_ORIGINAL="$CC"
CC=""
if [ "${MODE}" = "new" ]
then
	# Submitting a new port
	NEW_PORT="yes"
	DESCRIPTION=""
else
	if [ "${MODE}" = "" ]
	then
		# Automatically detect mode: change vs. update
		MODE="change"
		# Determine if it's update
		VERSION_CHANGE="`grep '^[+-]PORTVERSION' ${PATCH} | wc -l`"
		if [ ${VERSION_CHANGE} -eq 2 ]
		then
			OLD_VERSION="`awk '/^-PORTVERSION/ { print $2; }' ${PATCH}`"
			NEW_VERSION="`awk '/^\+PORTVERSION/ { print $2; }' ${PATCH}`"
			[ "${NEW_VERSION}" != "${OLD_VERSION}" ] && MODE="update"
		fi
	fi

	# Set PR parameters based on selected mode
	DESCRIPTION="[PORTTOOLS: DESCRIBE CHANGES]"

	if [ "${MODE}" = "update" ]
	then
		# Override some parameters if submitting an update to a newer
		# version of an existing port
		DESCRIPTION="- Update to ${VERSIONSTRING}"
	fi

	# Check to see if maintainership was requested
	MAINT_CHANGE="`grep '^[+-]MAINTAINER' ${PATCH} | wc -l`"
	if [ ${MAINT_CHANGE} -eq 2 ]
	then
		OLD_MAINTAINER="`awk '/^-MAINTAINER/ { print $2; }' ${PATCH}`"
		NEW_MAINTAINER="`awk '/^\+MAINTAINER/ { print $2; }' ${PATCH}`"
		if [ "${NEW_MAINTAINER}" != "${OLD_MAINTAINER}" ]
		then
			case ${NEW_MAINTAINER} in
			# New maintainer is you
			${EMAIL})
				DESCRIPTION="${DESCRIPTION}\n- Take maintainership"
				;;
			# Resetting maintainer to ports@FreeBSD.org"
			ports@FreeBSD.org)
				DESCRIPTION="${DESCRIPTION}\n- Reset maintainership to ports@FreeBSD.org"
				;;
			esac

			# CC previous port maintainer,
			# unless it was unmaintained
			if [ "${OLD_MAINTAINER}" != "ports@FreeBSD.org" ]; then
				CC="${OLD_MAINTAINER}"
			fi
		fi
	else
		[ "${MAINTAINER}" != "ports@FreeBSD.org" ] && CC="${MAINTAINER}"
	fi
fi

# If CC is set, check if maintainer is responsible. If not, CC both.
if [ "x${CC}" != "x" -a "x${RESPONSIBLE}" != "x" -a "${MAINTAINER}" != "${RESPONSIBLE}@FreeBSD.org" ]; then
	CC="${CC}; ${RESPONSIBLE}@FreeBSD.org"
# All other cases go to responsible only.
elif [ "x${RESPONSIBLE}" != "x" ]; then
	CC="${RESPONSIBLE}@FreeBSD.org"
else
	echo "Something weird happened. ${RESPONSIBLE} and ${MAINTAINER} but no CC."
fi

if [ -n "${CC_ORIGINAL}" ]
then
	CC_ALL="${CC_ORIGINAL}, ${CC}"
else
	CC_ALL="${CC}"
fi

BOUNDARY=`date|md5`

echo "===> Generating Followup form"
PR_FORM="${TEMPROOT}/PR"
cat > ${PR_FORM} <<- EOF
	From: ${FULLNAME} <${EMAIL}>
	To: bug-followup@FreeBSD.org
	Cc: ${CC_ALL}
	Bcc: ${BCC}
	Subject: Re: $SUBJECT
	X-GNATS-Notify:
	X-porttools-version: __VERSION__
	MIME-Version: 1.0
	Content-Type: multipart/mixed; boundary="------${BOUNDARY}"


	--------${BOUNDARY}
	Content-Type: text/plain; charset=utf-8; format=flowed
	Content-Transfer-Encoding: 8bit


	Description:
EOF

MODESTRING="mode: ${MODE}"

if [ "${MODE}" = "new" ]
then
	cat pkg-descr >> ${PR_FORM}
else
	echo -e ${DESCRIPTION} >> ${PR_FORM}

	MODESTRING="${MODESTRING}, diff: ${DIFF_TYPE}"

	if [ -n "${FILES_ADD}" ]
	then
		echo "" >> ${PR_FORM}
		echo "Added file(s):" >> ${PR_FORM}
		for file in ${FILES_ADD}
		do
			echo "- ${file}" >> ${PR_FORM}
		done
	fi

	if [ -n "${FILES_DEL}" ]
	then
		echo "" >> ${PR_FORM}
		echo "Removed file(s):" >> ${PR_FORM}
		for file in ${FILES_DEL}
		do
			echo "- ${file}" >> ${PR_FORM}
		done
	fi

fi


if [ "${CC}" != "" ]
then
	echo >> ${PR_FORM}
	if [ "x${RESPONSIBLE}" != "x" -a ! -n "${MAINTAINER}" -a "${MAINTAINER}" != "${RESPONSIBLE}@FreeBSD.org" ]; then
		echo "${MAINTAINER}" >> ${PR_FORM}
		echo "Port maintainer and responsible committer (${CC}) are cc'd." >> ${PR_FORM}
	elif [ "x${RESPONSIBLE}" != "x" ]; then
		echo "Responsible committer (${CC}) is cc'd." >> ${PR_FORM}
	else
		echo "Port maintainer (${CC}) is cc'd." >> ${PR_FORM}
	fi
fi

if [ "${COMMITTER}" = "yes" ]
then
	build_template
fi

cat >> ${PR_FORM} <<- EOF

	Generated with FreeBSD Port Tools __VERSION__ (${MODESTRING})


EOF

# Attach diff to PR_FORM (taken from send-pr(1))
if [ -e "${PATCH}" -a ! -d "${PATCH}" ]; then
	PRETTY_NAME=`basename ${PATCH}`
cat > ${PATCH}.att <<- EOF
--------${BOUNDARY}
Content-Type: text/plain; charset=utf-8;
  name="${PRETTY_NAME}"
Content-Transfer-Encoding: base64;
Content-Disposition: attachment;
  filename="${PRETTY_NAME}"

`if [ "${DRY_RUN}" != "yes" ]; then
	b64encode ${PRETTY_NAME} < "${PATCH}" | sed -e '/^begin-base64/d; /^====$/d'
else
	cat < ${PATCH}
fi`


--------${BOUNDARY}--

EOF

else
	echo "Could not append patch"
	cleanup
	exit 1

fi;


# Invoke EDITOR
if [ "${DRY_RUN}" != "yes" ]; then
${EDITOR} ${PR_FORM}

# Invoke send-pr(1)
	echo -n "s)end, e)dit or a)bort? $ECHON2"
	while [ -z "$input" ]; do
		read input

		case "$input" in
		a*)
			cleanup
			exit
			;;
		e*)
			${EDITOR} ${PR_FORM}
			continue 2
			;;
		s*)
			# Check for leftovers
			leftover_check ${PR_FORM}
			echo "===> Invoking sendmail(8) to submit a PR"
			cat "${PR_FORM}" "${PATCH}.att" | /usr/sbin/sendmail -t -F "${FULLNAME}" -f "${EMAIL}"
			break 2
			;;
		esac
	done
else
	cat "${PR_FORM}" "${PATCH}.att" | ${DIFF_VIEWER}
fi

if [ $? -ne 0 ]
then
	echo "Error submitting Followup"
	cleanup
	exit 1
fi

echo "===> Saving submitted PR, cleaning up"
# Cleanup
if [ -n "${ARCHIVE_DIR}" -a -d "${ARCHIVE_DIR}" -a "${DRY_RUN}" != "yes" ]
then
	echo "===> Backing up submitted patch"
	mv ${PATCH} ${ARCHIVE_DIR}
fi
cleanup

echo "===> Done"
exit 0
